{"version":3,"file":"component---src-templates-post-template-tsx-7afa4f76ee9a31addaaa.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport interface IPostHeadInfoProps {\r\n  title: string\r\n  date: string\r\n  categories: string[]\r\n}\r\n\r\nconst PostHeadInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 768px;\r\n  height: 100%;\r\n  margin: 0 auto;\r\n  padding: 60px 0;\r\n  color: #ffffff;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 40px 20px;\r\n  }\r\n`\r\n\r\nconst PrevPageIcon = styled.div`\r\n  display: grid;\r\n  place-items: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background: #ffffff;\r\n  color: #000000;\r\n  font-size: 22px;\r\n  cursor: pointer;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  @media (max-width: 768px) {\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 18px;\r\n  }\r\n`\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  overflow-wrap: break-word;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 45px;\r\n  font-weight: 800;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 30px;\r\n  }\r\n`\r\n\r\nconst PostData = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    font-size: 15px;\r\n    font-weight: 400;\r\n  }\r\n`\r\n\r\nconst PostHeadInfo = ({ title, date, categories }: IPostHeadInfoProps) => {\r\n  const goBackPage = () => window.history.back()\r\n\r\n  return (\r\n    <PostHeadInfoWrapper>\r\n      <PrevPageIcon onClick={goBackPage}>\r\n        <FontAwesomeIcon icon={faArrowLeft} />\r\n      </PrevPageIcon>\r\n      <Title>{title}</Title>\r\n      <PostData>\r\n        <div>\r\n          {categories\r\n            .map(category => {\r\n              return category.split('/')[1]\r\n            })\r\n            .join(' / ')}\r\n        </div>\r\n        <div>{date}</div>\r\n      </PostData>\r\n    </PostHeadInfoWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHeadInfo\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport PostHeadInfo, { IPostHeadInfoProps } from './PostHeadInfo'\r\n\r\ninterface IGatsbyImgProps {\r\n  image: IGatsbyImageData\r\n  alt: string\r\n  className?: string\r\n}\r\n\r\ninterface IPostHeadProps extends IPostHeadInfoProps {\r\n  thumbnail: IGatsbyImageData\r\n}\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 400px;\r\n  @media (max-width: 768px) {\r\n    height: 300px;\r\n  }\r\n`\r\n\r\nconst BackgroundImage = styled((props: IGatsbyImgProps) => (\r\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\r\n))`\r\n  z-index: -1;\r\n  width: 100%;\r\n  height: 400px;\r\n  object-fit: cover;\r\n  filter: brightness(0.25);\r\n\r\n  @media (max-width: 768px) {\r\n    height: 300px;\r\n  }\r\n`\r\n\r\nconst PostHead = ({ thumbnail, title, date, categories }: IPostHeadProps) => {\r\n  return (\r\n    <PostHeadWrapper>\r\n      <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\r\n      <PostHeadInfo title={title} date={date} categories={categories} />\r\n    </PostHeadWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHead\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\ninterface IPostContentProps {\r\n  html: string\r\n}\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  // Renderer Style\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 768px;\r\n  margin: 0 auto;\r\n  padding: 100px 0;\r\n  word-break: break-all;\r\n\r\n  // Markdown Style\r\n  line-height: 1.8;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 3px 0;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 800;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 80px;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 30px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 25px;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 30px 0;\r\n    padding: 5px 15px;\r\n    border-left: 2px solid #000000;\r\n    font-weight: 800;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    margin-left: 20px;\r\n    padding: 30px 0;\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    border: 1px solid #000000;\r\n    margin: 100px 0;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    color: #4263eb;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[class*='language-'] {\r\n    margin: 30px 0;\r\n    padding: 15px;\r\n    font-size: 15px;\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(255, 255, 255, 0.5);\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n  }\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 80px 20px;\r\n    line-height: 1.6;\r\n    font-size: 14px;\r\n\r\n    h1 {\r\n      font-size: 23px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 20px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 17px;\r\n    }\r\n\r\n    img {\r\n      width: 100%;\r\n    }\r\n\r\n    hr {\r\n      margin: 50px 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst PostContent = ({ html }: IPostContentProps) => {\r\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n}\r\n\r\nexport default PostContent\r\n","import styled from '@emotion/styled'\r\nimport React, { createRef, FunctionComponent, useEffect } from 'react'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'COYO-HM/coyo-log.github.io' // 자신 계정의 레포지토리로 설정\r\n\r\ninterface IUtterancesAttributesType {\r\n  src: string\r\n  repo: string\r\n  'issue-term': string\r\n  label: string\r\n  theme: string\r\n  crossorigin: string\r\n  async: string\r\n}\r\n\r\nconst UtterancesWrapper = styled.div`\r\n  @media (max-width: 768px) {\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst CommentWidget: FunctionComponent = function () {\r\n  const element = createRef<HTMLDivElement>()\r\n\r\n  useEffect(() => {\r\n    if (element.current === null) return\r\n\r\n    const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n    const attributes: IUtterancesAttributesType = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: `github-light`,\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    }\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value)\r\n    })\r\n\r\n    element.current.appendChild(utterances)\r\n  }, [])\r\n\r\n  return <UtterancesWrapper ref={element} />\r\n}\r\n\r\nexport default CommentWidget\r\n","import React, { FC } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Template from 'components/Common/Template'\r\nimport PostHead from 'components/Post/PostHead'\r\nimport { IPostFrontmatter } from 'model/Post'\r\nimport PostContent from 'components/Post/PostContent'\r\nimport CommentWidget from 'components/Post/CommentWidget'\r\n\r\nexport interface IPostPageItem {\r\n  node: {\r\n    html: string\r\n    frontmatter: IPostFrontmatter\r\n  }\r\n}\r\n\r\ninterface IPostTemplateProps {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: IPostPageItem[] // 존재하지 않는 타입이므로 에러가 발생하지만 일단 작성해주세요\r\n    }\r\n  }\r\n  location: {\r\n    href: string\r\n  }\r\n}\r\n\r\nconst PostTemplate = ({\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}: IPostTemplateProps) => {\r\n  const {\r\n    node: {\r\n      html,\r\n      frontmatter: {\r\n        title,\r\n        summary, // 나중에 사용할 예정입니다!\r\n        date,\r\n        categories,\r\n        thumbnail: {\r\n          childImageSharp: { gatsbyImageData },\r\n          publicURL,\r\n        },\r\n      },\r\n    },\r\n  } = edges[0]\r\n\r\n  return (\r\n    <Template title={title} description={summary} url={href} image={publicURL}>\r\n      <PostHead\r\n        title={title}\r\n        date={date}\r\n        categories={categories}\r\n        thumbnail={gatsbyImageData}\r\n      />\r\n      <PostContent html={html} />\r\n      <CommentWidget />\r\n    </Template>\r\n  )\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["PostHeadInfoWrapper","PrevPageIcon","Title","PostData","title","date","categories","___EmotionJSX","onClick","window","history","back","FontAwesomeIcon","icon","faArrowLeft","map","category","split","join","PostHeadWrapper","BackgroundImage","_styled","props","GatsbyImage","style","position","process","thumbnail","image","alt","PostHeadInfo","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","gatsbyImageData","childImageSharp","publicURL","Template","description","url","PostHead","PostContent","CommentWidget"],"sourceRoot":""}