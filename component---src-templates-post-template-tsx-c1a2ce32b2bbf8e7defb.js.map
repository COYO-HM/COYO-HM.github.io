{"version":3,"file":"component---src-templates-post-template-tsx-c1a2ce32b2bbf8e7defb.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/utils/index.ts","webpack://gatsby-starter-default/./src/components/Post/PostTableOfContents.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import styled from '@emotion/styled'\r\n\r\nexport interface IPostHeadInfoProps {\r\n  title: string\r\n  date: string\r\n  categories: string[]\r\n}\r\n\r\nconst PostHeadInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n  color: black;\r\n`\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  overflow-wrap: break-word;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 30px;\r\n  font-weight: 800;\r\n  text-align: center;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 24px;\r\n  }\r\n`\r\n\r\nconst PostData = styled.div`\r\n  margin-top: 60px;\r\n`\r\n\r\nconst PostDate = styled.div`\r\n  font-size: 18px;\r\n  font-weight: 400;\r\n  text-align: right;\r\n  opacity: 50%;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 14px;\r\n  }\r\n`\r\n\r\nconst PostCategories = styled(PostDate)``\r\n\r\nconst PostHeadInfo = ({ title, date, categories }: IPostHeadInfoProps) => {\r\n  return (\r\n    <PostHeadInfoWrapper>\r\n      <Title>{title}</Title>\r\n      <PostData>\r\n        <PostDate>{date}</PostDate>\r\n        <PostCategories>\r\n          {categories\r\n            .filter(category => category.split('/').length > 1)\r\n            .map(category => {\r\n              return category.split('/')[1]\r\n            })\r\n            .join(' / ')}\r\n        </PostCategories>\r\n      </PostData>\r\n    </PostHeadInfoWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHeadInfo\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport PostHeadInfo, { IPostHeadInfoProps } from './PostHeadInfo'\r\n\r\ninterface IGatsbyImgProps {\r\n  image: IGatsbyImageData\r\n  alt: string\r\n  className?: string\r\n}\r\n\r\ninterface IPostHeadProps extends IPostHeadInfoProps {\r\n  thumbnail: IGatsbyImageData\r\n}\r\n\r\nconst PostHeadWrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 40%;\r\n  margin: 60px 0 20px;\r\n`\r\n\r\nconst BackgroundImage = styled((props: IGatsbyImgProps) => (\r\n  <GatsbyImage {...props} style={{ position: 'absolute' }} />\r\n))`\r\n  z-index: -1;\r\n  width: 100%;\r\n  /* height: 400px; */\r\n  height: 100%;\r\n  object-fit: cover;\r\n  filter: brightness(0.25);\r\n`\r\n\r\nconst PostHead = ({ thumbnail, title, date, categories }: IPostHeadProps) => {\r\n  return (\r\n    <PostHeadWrapper>\r\n      {/* <BackgroundImage image={thumbnail} alt=\"thumbnail\" /> */}\r\n      <PostHeadInfo title={title} date={date} categories={categories} />\r\n    </PostHeadWrapper>\r\n  )\r\n}\r\n\r\nexport default PostHead\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\ninterface IPostContentProps {\r\n  html: string\r\n}\r\n\r\nconst MarkdownRenderer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px 0;\r\n\r\n  word-break: break-all;\r\n  border-top: 1px solid #b0a8b970;\r\n  border-bottom: 1px solid #b0a8b970;\r\n\r\n  @media screen and (max-width: 768px) {\r\n  }\r\n\r\n  // Markdown Style\r\n  line-height: 2;\r\n  font-size: 16px;\r\n  font-weight: 400;\r\n\r\n  * {\r\n    -webkit-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n  }\r\n\r\n  // Apply Padding Attribute to All Elements\r\n  p {\r\n    padding: 3px 0;\r\n  }\r\n\r\n  // Adjust Heading Element Style\r\n  h1,\r\n  h2,\r\n  h3 {\r\n    font-weight: 800;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  * + h1,\r\n  * + h2,\r\n  * + h3 {\r\n    margin-top: 20px;\r\n  }\r\n\r\n  hr + h1,\r\n  hr + h2,\r\n  hr + h3 {\r\n    margin-top: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 30px;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 25px;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  // Adjust Quotation Element Style\r\n  blockquote {\r\n    margin: 10px 0;\r\n    padding: 5px 15px;\r\n    border-left: 2px solid #000000;\r\n    font-weight: 800;\r\n  }\r\n\r\n  // Adjust List Element Style\r\n  ol,\r\n  ul {\r\n    margin-left: 20px;\r\n    padding: 5px 0;\r\n  }\r\n\r\n  // Adjust Horizontal Rule style\r\n  hr {\r\n    border: 1px solid #000000;\r\n    margin: 100px 0;\r\n  }\r\n\r\n  // Adjust Link Element Style\r\n  a {\r\n    color: #4263eb;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  img {\r\n    width: 100%;\r\n  }\r\n\r\n  // Adjust Code Style\r\n  pre[class*='language-'] {\r\n    margin: 10px 0;\r\n    padding: 20px;\r\n    font-size: 14px;\r\n    border-radius: 4px;\r\n    font-family: 'JetBrains Mono';\r\n\r\n    ::-webkit-scrollbar-thumb {\r\n      background: rgba(255, 255, 255, 0.5);\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n\r\n  code[class*='language-'],\r\n  pre[class*='language-'] {\r\n    tab-size: 2;\r\n    font-family: 'JetBrains Mono';\r\n\r\n    * {\r\n      font-family: 'JetBrains Mono';\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 40px 20px;\r\n    line-height: 1.6;\r\n    font-size: 14px;\r\n\r\n    h1 {\r\n      font-size: 23px;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 20px;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 17px;\r\n    }\r\n\r\n    img {\r\n      width: 100%;\r\n    }\r\n\r\n    hr {\r\n      margin: 50px 0;\r\n    }\r\n  }\r\n\r\n  code[class*='language-text'] {\r\n    tab-size: 2;\r\n    font-family: 'JetBrains Mono';\r\n    padding: 0.2em;\r\n  }\r\n\r\n  .noticeBox {\r\n    padding: 20px;\r\n    font-weight: 500;\r\n    font-size: 16px;\r\n    background-color: #f6e58d;\r\n    border-radius: 10px;\r\n  }\r\n`\r\n\r\nconst PostContent = ({ html }: IPostContentProps) => {\r\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\r\n}\r\n\r\nexport default PostContent\r\n","import styled from '@emotion/styled'\r\nimport React, { createRef, FunctionComponent, useEffect } from 'react'\r\n\r\nconst src = 'https://utteranc.es/client.js'\r\nconst repo = 'COYO-HM/COYO-HM.github.io' // 자신 계정의 레포지토리로 설정\r\n\r\ninterface IUtterancesAttributesType {\r\n  src: string\r\n  repo: string\r\n  'issue-term': string\r\n  label: string\r\n  theme: string\r\n  crossorigin: string\r\n  async: string\r\n}\r\n\r\nconst UtterancesWrapper = styled.div``\r\n\r\nconst CommentWidget: FunctionComponent = function () {\r\n  const element = createRef<HTMLDivElement>()\r\n\r\n  useEffect(() => {\r\n    if (element.current === null) return\r\n\r\n    const utterances: HTMLScriptElement = document.createElement('script')\r\n\r\n    const attributes: IUtterancesAttributesType = {\r\n      src,\r\n      repo,\r\n      'issue-term': 'pathname',\r\n      label: 'Comment',\r\n      theme: `github-light`,\r\n      crossorigin: 'anonymous',\r\n      async: 'true',\r\n    }\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value)\r\n    })\r\n\r\n    element.current.appendChild(utterances)\r\n  }, [])\r\n\r\n  return <UtterancesWrapper ref={element} />\r\n}\r\n\r\nexport default CommentWidget\r\n","export const isBrowser = typeof window !== 'undefined'\r\n","import styled from '@emotion/styled'\r\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { useCallback } from 'react'\r\nimport { isBrowser } from '../../utils'\r\n\r\ninterface IPostTableOfContentsProps {\r\n  tableOfContents: string\r\n}\r\n\r\nconst PostTableWrapper = styled.div`\r\n  flex: 0 0 200px;\r\n  position: relative;\r\n  height: 100%;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst TableofContentsWrapper = styled.div`\r\n  position: -webkit-sticky;\r\n  position: sticky;\r\n  top: 50%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 200px;\r\n  transform: translateY(-50%);\r\n`\r\n\r\nconst UpButton = styled.button`\r\n  border: none;\r\n  background-color: transparent;\r\n  height: 50px;\r\n  line-height: 50px;\r\n  font-size: 32px;\r\n  text-align: center;\r\n  place-items: center;\r\n  color: black;\r\n\r\n  &:hover {\r\n    color: #845ec2;\r\n  }\r\n`\r\n\r\nconst DownButton = styled(UpButton)``\r\n\r\nconst TableofContents = styled.div<{ maxHeight: string }>`\r\n  border-left: 2px solid #b0a8b970;\r\n  padding: 15px;\r\n  width: 100%;\r\n  max-height: ${props => props.maxHeight};\r\n  overflow-y: auto;\r\n  font-size: 14px;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    border-radius: 5px;\r\n    background-color: #b0a8b929;\r\n\r\n    &:hover {\r\n      background-color: #845ec2;\r\n    }\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background-color: transparent;\r\n  }\r\n\r\n  * {\r\n    list-style: none;\r\n    padding-bottom: 5px;\r\n\r\n    &:last-child {\r\n      padding-bottom: 0;\r\n    }\r\n  }\r\n\r\n  * > ul > li {\r\n    padding-left: 5px;\r\n  }\r\n`\r\n\r\nconst PostTableOfContents = ({\r\n  tableOfContents,\r\n}: IPostTableOfContentsProps) => {\r\n  const maxHeight = isBrowser\r\n    ? `calc(${window?.innerHeight}px - 200px)`\r\n    : '200px'\r\n\r\n  const onClickUpButton = useCallback(() => {\r\n    document.getElementById('contentWrapper')?.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  const onClickDownButton = useCallback(() => {\r\n    const contentWrapperRef = document.getElementById('contentWrapper')\r\n    if (contentWrapperRef) {\r\n      contentWrapperRef.scrollTo(0, contentWrapperRef.scrollHeight)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <PostTableWrapper>\r\n      <TableofContentsWrapper>\r\n        <UpButton onClick={onClickUpButton}>\r\n          <FontAwesomeIcon icon={faAngleUp} />\r\n        </UpButton>\r\n        <TableofContents\r\n          dangerouslySetInnerHTML={{ __html: tableOfContents }}\r\n          maxHeight={maxHeight}\r\n        />\r\n        <DownButton onClick={onClickDownButton}>\r\n          <FontAwesomeIcon icon={faAngleDown} />\r\n        </DownButton>\r\n      </TableofContentsWrapper>\r\n    </PostTableWrapper>\r\n  )\r\n}\r\n\r\nexport default PostTableOfContents\r\n","import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Template from 'components/Common/Template'\r\nimport PostHead from 'components/Post/PostHead'\r\nimport { IPostFrontmatter } from '../model/Post'\r\nimport PostContent from 'components/Post/PostContent'\r\nimport CommentWidget from 'components/Post/CommentWidget'\r\nimport PostTableOfContents from 'components/Post/PostTableOfContents'\r\nimport { IMenuList } from 'components/Common/Sidebar'\r\nimport styled from '@emotion/styled'\r\n\r\nexport interface IPostPageItem {\r\n  node: {\r\n    html: string\r\n    tableOfContents: string\r\n    frontmatter: IPostFrontmatter\r\n  }\r\n}\r\n\r\ninterface IPostTemplateProps {\r\n  pageContext: {\r\n    menuList: IMenuList\r\n  }\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: IPostPageItem[]\r\n    }\r\n  }\r\n  location: {\r\n    href: string\r\n  }\r\n}\r\n\r\nconst PostWrapper = styled.div`\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  display: grid;\r\n  column-gap: 20px;\r\n  justify-content: center;\r\n  grid-template-columns: min(calc(100% - 220px), 768px) 200px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    grid-template-columns: 100%;\r\n  }\r\n`\r\n\r\nconst PostContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`\r\n\r\nconst PostTemplate = ({\r\n  pageContext: { menuList },\r\n  data: {\r\n    allMarkdownRemark: { edges },\r\n  },\r\n  location: { href },\r\n}: IPostTemplateProps) => {\r\n  const {\r\n    node: {\r\n      html,\r\n      tableOfContents,\r\n      frontmatter: {\r\n        title,\r\n        summary,\r\n        date,\r\n        categories,\r\n        thumbnail: {\r\n          childImageSharp: { gatsbyImageData },\r\n          publicURL,\r\n        },\r\n      },\r\n    },\r\n  } = edges[0]\r\n\r\n  return (\r\n    <Template\r\n      title={title}\r\n      description={summary}\r\n      url={href}\r\n      image={publicURL}\r\n      menuList={menuList}\r\n    >\r\n      <PostWrapper>\r\n        <PostContentWrapper>\r\n          <PostHead\r\n            title={title}\r\n            date={date}\r\n            categories={categories}\r\n            thumbnail={gatsbyImageData}\r\n          />\r\n          <PostContent html={html} />\r\n          <CommentWidget />\r\n        </PostContentWrapper>\r\n        <PostTableOfContents tableOfContents={tableOfContents} />\r\n      </PostWrapper>\r\n    </Template>\r\n  )\r\n}\r\n\r\nexport default PostTemplate\r\n\r\nexport const queryMarkdownDataBySlug = graphql`\r\n  query queryMarkdownDataBySlug($slug: String) {\r\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\r\n      edges {\r\n        node {\r\n          html\r\n          tableOfContents\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData\r\n              }\r\n              publicURL\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["PostHeadInfoWrapper","target","name","styles","Title","PostData","PostDate","PostCategories","_styled","process","title","date","categories","___EmotionJSX","filter","category","split","length","map","join","PostHeadWrapper","thumbnail","PostHeadInfo","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","isBrowser","window","PostTableWrapper","TableofContentsWrapper","UpButton","DownButton","TableofContents","props","maxHeight","tableOfContents","_window","innerHeight","onClickUpButton","useCallback","getElementById","scrollTo","onClickDownButton","contentWrapperRef","scrollHeight","onClick","FontAwesomeIcon","icon","faAngleUp","faAngleDown","PostWrapper","PostContentWrapper","menuList","pageContext","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","gatsbyImageData","childImageSharp","publicURL","Template","description","url","image","PostHead","PostContent","CommentWidget","PostTableOfContents"],"sourceRoot":""}